apply plugin: 'com.android.application'

repositories {
    maven { url "https://jitpack.io" }
    jcenter()
}


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.github.plnice:canidropjetifier:0.5"
    }

}

apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: "com.github.plnice.canidropjetifier"

// set flag whether we are on a build server
def isCi = "true" == System.getenv("CI")

android {
    compileSdkVersion 29
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("${project.rootDir}/signing/debug.keystore")
            storePassword 'android'
        }
        release {
            if (isCi) {
                storeFile file("${project.rootDir}/release.jks")
                storePassword = System.getenv("RELEASE_STORE_PASSWORD")
                keyAlias = System.getenv("RELEASE_ALIAS")
                keyPassword = System.getenv("RELEASE_PASSWORD")
                //keyAlias 'androiddebugkey'
                //keyPassword 'android'
                //storeFile file("${project.rootDir}/signing/debug.keystore")
                //storePassword 'android'
            } else {
                Properties propsSigning = new Properties()
                def signingPropsFile = rootProject.file("${project.rootDir}/signing/release.signing.properties")
                if (signingPropsFile.canRead()) {
                    propsSigning.load(new FileInputStream(signingPropsFile))
                    if (propsSigning != null &&
                            propsSigning.containsKey('STORE_FILE') &&
                            propsSigning.containsKey('STORE_PASSWORD') &&
                            propsSigning.containsKey('KEY_ALIAS') &&
                            propsSigning.containsKey('KEY_PASSWORD')) {
                        storeFile = file(propsSigning['STORE_FILE'])
                        storePassword = propsSigning['STORE_PASSWORD']
                        keyAlias = propsSigning['KEY_ALIAS']
                        keyPassword = propsSigning['KEY_PASSWORD']
                    } else {
                        println 'release.signing.properties file found but some entries are missing'
                    }
                } else {
                    println 'release.signing.properties file is missing'
                }
            }
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
    }

    defaultConfig {
        applicationId "dynoapps.exchange_rates"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode getBuildVersionCode()
        versionName getBuildVersionName()
        setProperty("archivesBaseName", versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            versionNameSuffix ' Debug'
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
            minifyEnabled false
        }
        production {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-android-java.pro'
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
        }
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !isCi
    }

    lintOptions {
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false
        // Allow lint to check dependencies
        checkDependencies true
        // Ignore any tests
        ignoreTestSources true

        // Lint doesn't seem to handle Kotlin int types + string format very well
        disable 'StringFormatMatches'
        // Seems to be broken in 4.0.0-alpha09 https://issuetracker.google.com/issues/148172219
        disable 'Instantiatable'
    }

    // Add this block and enable/disable the parameters as follows
    bundle {
        density {
            // Different APKs are generated for devices with different screen densities; true by default.
            enableSplit true
        }
        abi {
            // Different APKs are generated for devices with different CPU architectures; true by default.
            enableSplit true
        }
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language.
            // We're gonna use the same APK for all languages.
            enableSplit true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.3.0-alpha04'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0-RC1'


    // reactiveX
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'

    // retrofit
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'


    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.github.PhilJay:MPAndroidChart:3.1.0'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'

    implementation 'androidx.room:room-runtime:2.3.0-alpha03'
    implementation 'androidx.room:room-rxjava2:2.3.0-alpha03'
    annotationProcessor 'androidx.room:room-compiler:2.3.0-alpha03'

    implementation 'androidx.lifecycle:lifecycle-runtime:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'


    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'

    androidTestImplementation('tools.fastlane:screengrab:2.0.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testImplementation 'junit:junit:4.13.1'

    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:2.2'

}

def getPropertiesFile() {
    return file("${project.rootDir}/gradle.properties")
}

def getBuildVersionName() {
    Properties properties = new Properties()
    def propsFile = getPropertiesFile()
    if (propsFile.canRead()) {

        properties.load(propsFile.newDataInputStream())
        def major = properties.getProperty("versionMajor") as String
        def minor = properties.getProperty("versionMinor") as String
        def patch = properties.getProperty("versionPatch") as String
        def build = properties.getProperty("versionBuild") as String
        def version = major + "." + minor
        if (build != "0") {
            version += "." + patch + "." + build
        } else if (patch != "0") {
            version += "." + patch
        }
        println "Version : " + version
        return version

    } else {
        throw new GradleException("Versionname : unable to find gradle.properties file : \n" + propsFile.absolutePath)
    }
}

def getBuildVersionCode() {

    Properties properties = new Properties()
    def propsFile = getPropertiesFile()

    if (propsFile.canRead()) {
        properties.load(propsFile.newDataInputStream())

        def major = properties.getProperty("versionMajor") as int
        def minor = properties.getProperty("versionMinor") as int
        def patch = properties.getProperty("versionPatch") as int
        def build = properties.getProperty("versionBuild") as int
        def suffix = properties.get("versionSuffix") != null ? properties.getProperty("versionSuffix") : "" as String
        String[] suffixSplited = suffix.tokenize(".")
        int suffixInt = suffixSplited.size() > 1 ? suffixSplited[1] as int : 0 as int
        return (major * 1000000 + minor * 10000 + patch * 100 + build + suffixInt) as int
    } else {
        println 'unable to find gradle.properties file'
        throw new GradleException("Versioncode : unable to find gradle.properties file : " + propsFile.absolutePath)
    }
}
