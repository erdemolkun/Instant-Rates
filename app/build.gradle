apply plugin: 'com.android.application'

repositories {
    maven { url "https://jitpack.io" }
    jcenter()
}


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }

    }
}

// set flag whether we are on a build server
def isCi = "true" == System.getenv("CI")

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("${project.rootDir}/keystores/debug.keystore")
            storePassword 'android'
        }
        release {
            if (isCi) {
                storeFile rootProject.file("keystores/release.jks")
                storePassword = System.getenv("RELEASE_STORE_PASSWORD")
                keyAlias = System.getenv("RELEASE_ALIAS")
                keyPassword = System.getenv("RELEASE_PASSWORD")
            } else {
                Properties propsSigning = new Properties()
                def signingPropsFile = rootProject.file('release.signing.properties')
                if (signingPropsFile.canRead()) {
                    propsSigning.load(new FileInputStream(signingPropsFile))
                    if (propsSigning != null &&
                            propsSigning.containsKey('STORE_FILE') &&
                            propsSigning.containsKey('STORE_PASSWORD') &&
                            propsSigning.containsKey('KEY_ALIAS') &&
                            propsSigning.containsKey('KEY_PASSWORD')) {
                        storeFile = file(propsSigning['STORE_FILE'])
                        storePassword = propsSigning['STORE_PASSWORD']
                        keyAlias = propsSigning['KEY_ALIAS']
                        keyPassword = propsSigning['KEY_PASSWORD']
                    } else {
                        println 'release.signing.properties file found but some entries are missing'
                    }
                } else {
                    println 'release.signing.properties file is missing'
                }
            }
        }
    }
    defaultConfig {
        applicationId "dynoapps.exchange_rates"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode getBuildVersionCode()
        versionName getBuildVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            versionNameSuffix ' Debug'
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
            minifyEnabled false
        }
        prod {
            proguardFile 'proguard-appcompat-v7.pro'
            proguardFile 'proguard-android-java.pro'
            proguardFile 'proguard-square-retrofit2.pro'
            proguardFile 'proguard-simple-xml.pro'
            proguardFile 'proguard-rules.pro'
            proguardFile 'proguard-project-app.pro'
            proguardFile 'proguard-support-design.pro'
            signingConfig signingConfigs.release
            minifyEnabled true;
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.0.0-beta2'
    compile 'com.android.support:cardview-v7:26.0.0-beta2'
    compile 'com.android.support:design:26.0.0-beta2'

    compile 'com.google.android.gms:play-services-analytics:11.0.2'

    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    compile('com.squareup.retrofit2:converter-simplexml:2.3.0') {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    // reactiveX
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex.rxjava2:rxjava:2.1.1'

    // retrofit
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'


    compile 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'

    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'org.jsoup:jsoup:1.10.3'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    compile 'com.github.orhanobut:logger:2.1.1'

    compile 'com.facebook.stetho:stetho:1.5.0'
    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    compile "android.arch.persistence.room:runtime:1.0.0-alpha5"
    compile "android.arch.persistence.room:rxjava2:1.0.0-alpha5"
    compile "android.arch.lifecycle:runtime:1.0.0-alpha5"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha5"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0-alpha5"


    androidTestCompile('tools.fastlane:screengrab:1.0.3', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    testCompile 'junit:junit:4.12'


    androidTestCompile 'com.android.support:support-annotations:26.0.0-beta2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'


}

def getPropertiesFile() {
    return file("${project.rootDir}/gradle.properties")
}

def getBuildVersionName() {
    Properties properties = new Properties();
    def propsFile = getPropertiesFile()
    if (propsFile.canRead()) {

        properties.load(propsFile.newDataInputStream());
        def major = properties.getProperty("versionMajor") as String
        def minor = properties.getProperty("versionMinor") as String
        def patch = properties.getProperty("versionPatch") as String
        def build = properties.getProperty("versionBuild") as String
        def suffix = properties.get("versionSuffix") != null ? properties.getProperty("versionSuffix") : "" as String
        println "Suffix : " + suffix
        def version = major + "." + minor
        if (build != "0") {
            version += "." + patch + "." + build
        } else if (patch != "0") {
            version += "." + patch;
        }
        return version + suffix;

    } else {
        throw new GradleException("Versionname : unable to find gradle.properties file : \n" + propsFile.absolutePath)
    }
}

def getBuildVersionCode() {

    Properties properties = new Properties();
    def propsFile = getPropertiesFile()

    if (propsFile.canRead()) {
        properties.load(propsFile.newDataInputStream());

        def major = properties.getProperty("versionMajor") as int
        def minor = properties.getProperty("versionMinor") as int
        def patch = properties.getProperty("versionPatch") as int
        def build = properties.getProperty("versionBuild") as int
        def suffix = properties.get("versionSuffix") != null ? properties.getProperty("versionSuffix") : "" as String
        String[] suffixSplited = suffix.tokenize(".")
        int suffixInt = suffixSplited.size() > 1 ? suffixSplited[1] as int : 0 as int
        return (major * 1000000 + minor * 10000 + patch * 100 + build + suffixInt) as int
    } else {
        println 'unable to find gradle.properties file'
        throw new GradleException("Versioncode : unable to find gradle.properties file : " + propsFile.absolutePath)
    }
}
